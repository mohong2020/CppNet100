#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#define WIN32_LEAN_AND_MEAN
#define _WINSOCK_DEPRECATED_NO_WARNINGS 

#include <Windows.h>
#include <WinSock2.h>	//该头文件应该放在Windows.h前面，或者加一个宏定义

#pragma comment(lib,"ws2_32.lib")	//引用相关的库

//建立TCP服务端
//1 建立一个socket
//2 绑定接受客户端连接的端口 bind
//3 监听网络端口 listen
//4 等待接收客户端连接accept
//5 向客户端发送一条数据 send
//6 关闭socket closesocket
//建立TCP客户端
//1 建立一个 socket
//2 连接服务器 connect
//3 接受服务器信息 recv
//4 关闭socket closesocket

enum CMD {
	CMD_LOGIN,
	CMD_LOGIN_RESULT,
	CMD_LOGOUT,
	CMD_LOGOUT_RESULT,
	CMD_NEW_USER_JOIN,
	CMD_ERROR
};

//消息头
struct DataHeader {
	short dataLength;	//数据长度
	short cmd;
};

//消息体
//登录
//DataPackage
struct Login : public DataHeader {
	Login() {
		dataLength = sizeof(Login);
		cmd = CMD_LOGIN;
	}
	char userName[32];
	char passWord[32];
};

struct LoginResult : public DataHeader {
	LoginResult() {
		dataLength = sizeof(LoginResult);
		cmd = CMD_LOGIN_RESULT;
		result = 0;
	}
	int result;
};

//登出
struct Logout : public DataHeader {
	char userName[32];
	Logout() {
		dataLength = sizeof(Logout);
		cmd = CMD_LOGOUT;
	}
};

struct LogoutResult : public DataHeader {
	LogoutResult() {
		dataLength = sizeof(LogoutResult);
		cmd = CMD_LOGOUT_RESULT;
		result = 0;
	}
	int result;
};

struct NewUserJoin : public DataHeader {
	NewUserJoin() {
		dataLength = sizeof(NewUserJoin);
		cmd = CMD_NEW_USER_JOIN;
		sock = 0;
	}
	int sock;
};

//处理业务逻辑的函数
int  processor(SOCKET _cSock) {
	//使用一个缓冲来接受数据
	char szRecv[4096] = {};

	//#5 接收客户端数据
	int nlen = recv(_cSock, szRecv, sizeof(DataHeader), 0);	//必须是连入客户端的socket
	DataHeader* header = (DataHeader*)szRecv;
	if (nlen <= 0) {
		printf("与服务器断开连接<Socket=%d>，任务结束。\n", _cSock);
		return -1;
	}

	//#6 处理请求
	switch (header->cmd) {
		case CMD_LOGIN_RESULT:
		{
			recv(_cSock, szRecv + sizeof(DataHeader), header->dataLength - sizeof(DataHeader), 0);
			LoginResult* loginr = (LoginResult*)szRecv;
			printf("收到服务器数据：CMD_LOGIN_RESULT，数据长度 = %d\n",loginr->dataLength);
		}
		break;
		case CMD_LOGOUT_RESULT:
		{
			recv(_cSock, szRecv + sizeof(DataHeader), header->dataLength - sizeof(DataHeader), 0);
			LogoutResult* logoutr = (LogoutResult*)szRecv;
			printf("收到服务器数据：CMD_LOGOUT_RESULT，数据长度 = %d\n", logoutr->dataLength);
		}
		break;
		case CMD_NEW_USER_JOIN:
		{
			recv(_cSock, szRecv + sizeof(DataHeader), header->dataLength - sizeof(DataHeader), 0);
			NewUserJoin* userjoin = (NewUserJoin*)szRecv;
			printf("收到服务器数据：CMD_NEW_USER_JOIN，新加入客户端<%d>，数据长度 = %d\n", userjoin->sock,userjoin->dataLength);
		}
		break;
	}
	return 1;
}


void test1()
{
	WORD ver = MAKEWORD(2, 2);
	WSADATA dat;
	WSAStartup(ver, &dat);		//开始启动
								//#1 建立一个 socket
	SOCKET _sock = socket(AF_INET, SOCK_STREAM, 0);
	if (INVALID_SOCKET == _sock) {
		std::cout << "INVALID_SOCKET == _sock" << std::endl;
	}

	//#2 连接服务器 connect
	sockaddr_in _sin = {};
	_sin.sin_family = AF_INET;
	_sin.sin_port = htons(4567);	//所连接服务端的端口号
	_sin.sin_addr.S_un.S_addr = inet_addr("127.0.0.1");
	int ret = connect(_sock, (sockaddr*)(&_sin), sizeof(sockaddr_in));
	if (SOCKET_ERROR == ret) {
		std::cout << "SOCKET_ERROR == ret" << std::endl;
	}

	//#3 输入请求命令
	while (true) {
		fd_set fdReads;
		FD_ZERO(&fdReads);
		FD_SET(_sock, &fdReads);
		timeval mytime = { 0,0 };	//设置等待时间，{秒数，毫秒数}
		int ret = select(_sock + 1, &fdReads, 0, 0, &mytime);
		if (ret < 0) {
			printf("client select任务结束\n");
			break;
		}
		if (FD_ISSET(_sock, &fdReads)) {
			FD_CLR(_sock, &fdReads);
			if (-1 == processor(_sock)) {
				printf("-1 == processor(_sock) 客户端任务结束\n");
				break;
			}
		}
		printf("空闲时间处理其他业务\n");
		//Login login;
		//strcpy(login.userName, "lyd");
		//strcpy(login.passWord, "lydpw");
		//send(_sock, (const char*)&login, sizeof(Login), 0);
		//Sleep(1000);
	}

	//#7 关闭socket closesocket
	closesocket(_sock);

	WSACleanup();		//进行关闭
	printf("收到退出命令，已退出。\n");
	getchar();
}


int main()
{
	test1();
	//system("pause");
	return 0;
}
