#include <iostream>
#define _WINSOCK_DEPRECATED_NO_WARNINGS 
#define WIN32_LEAN_AND_MEAN
#include <Windows.h>
#include <WinSock2.h>	//该头文件应该放在Windows.h前面，或者加一个宏定义

#pragma comment(lib,"ws2_32.lib")	//引用相关的库

#include <string>

//建立TCP服务端
//1 建立一个socket
//2 绑定接受客户端连接的端口 bind
//3 监听网络端口 listen
//4 等待接收客户端连接accept
//5 向客户端发送一条数据 send
//6 关闭socket closesocket
//建立TCP客户端
//1 建立一个 socket
//2 连接服务器 connect
//3 接受服务器信息 recv
//4 关闭socket closesocket


void test1()
{
	WORD ver = MAKEWORD(2, 2);
	WSADATA dat;
	WSAStartup(ver, &dat);		//开始启动

								//#1 建立一个socket，套接字
	SOCKET _sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
	//ipv4网络，面向字节流，tcp方式
	//判断一下sock是否创建成功
	//...

	//#2 绑定接受客户端连接的端口 bind
	sockaddr_in _sin = {};
	_sin.sin_family = AF_INET;
	_sin.sin_port = htons(4567);		//端口号，将主机字节序转为网络字节序
	_sin.sin_addr.S_un.S_addr = INADDR_ANY;		//本机的所有ip地址
												//S_un是一个联合体
	if (SOCKET_ERROR == bind(_sock, (sockaddr*)&_sin, sizeof(_sin))) {
		std::cout << "SOCKET_ERROR == bind" << std::endl;
	}
	else {
		std::cout << "bind 绑定端口成功" << std::endl;
	}

	//#3 监听网络端口 listen
	if (SOCKET_ERROR == listen(_sock, 5)) {	//监听，并且允许最大连接量
		std::cout << "SOCKET_ERROR == listen" << std::endl;
	}
	else {
		std::cout << "listen成功" << std::endl;
	}

	//#4 等待接收客户端连接accept
	sockaddr_in clientAddr = {};		//客户端的地址
	int nLenAddr = sizeof(sockaddr_in);
	SOCKET _cSock = INVALID_SOCKET;


	_cSock = accept(_sock, (sockaddr*)&clientAddr, &nLenAddr);
	if (INVALID_SOCKET == _cSock) {
		std::cout << "INVALID_SOCKET == _cSock" << std::endl;
	}
	//inet_ntoa(clientAddr.sin_addr);
	printf("有新的客户端接入，socket = %d，IP = %s\n", _cSock, inet_ntoa(clientAddr.sin_addr));

	while (true) {
		char _recvBuf[128] = {};
		//#5 接收客户端数据
		int nlen = recv(_cSock, _recvBuf, 128, 0);	//必须是连入客户端的socket
		if (nlen <= 0) {
			printf("客户端已退出，任务结束。\n");
			break;
		}
		printf("收到客户端命令%s\n", _recvBuf);
		//#6 处理请求
		if (0 == strcmp(_recvBuf, "getName")) {
			char msgBuf[] = "名字：小强\n";
			send(_cSock, msgBuf, strlen(msgBuf) + 1, 0);
		}
		else if (0 == strcmp(_recvBuf, "getAge")) {
			char msgBuf[] = "年龄：80\n";
			send(_cSock, msgBuf, strlen(msgBuf) + 1, 0);
		}
		else {
			char msgBuf[] = "??????\n";
			send(_cSock, msgBuf, strlen(msgBuf) + 1, 0);
		}

	}

	//#6 关闭socket closesocket
	closesocket(_sock);

	WSACleanup();		//进行关闭
	printf("任务结束，已退出。\n");
	getchar();
}


int main()
{
	test1();
	system("pause");
	return 0;
}
